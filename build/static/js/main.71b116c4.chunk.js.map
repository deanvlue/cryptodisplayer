{"version":3,"sources":["Card/btcicon.png","Card/Card.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","state","btcprice","axios","get","then","response","setState","data","BTC","MXN","catch","error","console","log","className","src","require","Intl","NumberFormat","style","currency","format","this","Component","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"6LAAAA,EAAOC,QAAU,IAA0B,qC,sJCkD5BC,E,YA3Cb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXC,SAAU,IAHA,E,kFAOQ,IAAD,OACnBC,IACGC,IACC,iFAEDC,MAAK,SAAAC,GAEJ,EAAKC,SAAS,CAAEL,SAAUI,EAASE,KAAKC,IAAIC,SAG7CC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,Q,+BAMhB,OACE,yBAAKG,UAAU,4BACb,yBAAKA,UAAU,+BACb,yBAAKA,UAAU,uBACb,yBAAKC,IAAKC,EAAQ,OAEpB,yBAAKF,UAAU,uBACb,4BAAK,IAAIG,KAAKC,aAAa,QAAS,CAClCC,MAAM,WACNC,SAAS,QACRC,OAAOC,KAAKtB,MAAMC,WACrB,kD,GArCOsB,aCwBJC,E,iLAjBX,OACE,yBAAKV,UAAU,IACb,6BAASA,UAAU,oBACjB,yBAAKA,UAAU,aACb,uCAIF,yBAAKA,UAAU,2BACb,kBAAC,EAAD,a,GAXMS,aCEZE,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACT5B,MAAK,SAAAiC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBvC,QACfkC,UAAUC,cAAcO,YAI1B9B,QAAQC,IACN,iHAKEoB,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlBzB,QAAQC,IAAI,sCAGRoB,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,WAO5B3B,OAAM,SAAAC,GACLC,QAAQD,MAAM,4CAA6CA,MC1FjEkC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBf,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIe,IAAIC,GAAwBvB,OAAOC,SAASuB,MACpDC,SAAWzB,OAAOC,SAASwB,OAIvC,OAGFzB,OAAO0B,iBAAiB,QAAQ,WAC9B,IAAMrB,EAAK,UAAMkB,GAAN,sBAEPzB,IAgEV,SAAiCO,EAAOC,GAEtCqB,MAAMtB,GACH5B,MAAK,SAAAC,GAEJ,IAAMkD,EAAclD,EAASmD,QAAQrD,IAAI,gBAEnB,MAApBE,EAASoD,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CxB,UAAUC,cAAcwB,MAAMvD,MAAK,SAAAiC,GACjCA,EAAauB,aAAaxD,MAAK,WAC7BuB,OAAOC,SAASiC,eAKpB9B,EAAgBC,EAAOC,MAG1BvB,OAAM,WACLE,QAAQC,IACN,oEArFAiD,CAAwB9B,EAAOC,GAI/BC,UAAUC,cAAcwB,MAAMvD,MAAK,WACjCQ,QAAQC,IACN,iHAMJkB,EAAgBC,EAAOC,OCvC/BE,K","file":"static/js/main.71b116c4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/btcicon.19b5ef5e.png\";","import React, { Component } from \"react\";\r\nimport \"./Card.css\";\r\nimport axios from \"axios\";\r\n\r\n\r\nclass Card extends Component {\r\n  // Adds class constructor that assigns inital state values\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      btcprice: \"\",\r\n    };\r\n  }\r\n\r\n  componentWillMount() {\r\n    axios\r\n      .get(\r\n        \"https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC&tsyms=MXN\"\r\n      )\r\n      .then(response => {\r\n        // Set the lates prices\r\n        this.setState({ btcprice: response.data.BTC.MXN });\r\n      })\r\n      // cathc errors here\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  // render method to display the html\r\n  render() {\r\n    return (\r\n      <div className=\"today--section container\">\r\n        <div className=\"columns today--section__box\">\r\n          <div className=\"column symbol--icon\">\r\n            <img src={require('./btcicon.png')} />\r\n          </div>\r\n          <div className=\"column btc--section\">\r\n            <h5>{new Intl.NumberFormat('en-US', {\r\n              style:'currency',\r\n              currency:'USD'\r\n            }).format(this.state.btcprice)}</h5>\r\n            <p> MXN - 1 BTC</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\n// IMport today component\n//import Today from \"./Today/Today\";\nimport Card from \"./Card/Card\"\n\n// import history\n//import History from \"./History/History\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"\">\n        <section className=\"results--section\">\n          <div className=\"container\">\n            <h1>\n            TICKER\n            </h1>\n          </div>\n          <div className=\"results--section__inner\">\n            <Card />\n          </div>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}